# 실행 결과

5v

3.3v

![image.png](attachment:ec22ad1a-e55c-497b-ae87-11d5972f5715:image.png)

![image.png](attachment:d9244847-4a64-450a-92ff-53d8b51d09d2:image.png)

---

# 코드

```cpp
#include <Arduino_FreeRTOS.h>
#include <semphr.h>

#define WINDOW_SIZE 6
#define NUM_ADC_CHANNELS 4

// ADC 핀 정의
const uint8_t ADC_PINS[NUM_ADC_CHANNELS] = {A0, A1, A2, A3};

// ADC 변환 데이터를 위한 구조체
typedef struct {
  int channelNum;               // ADC 채널 번호
  float rawValue;               // 원시 ADC 값
  float filteredValue;          // 필터링된 값
  uint32_t samplingInterval;    // 샘플링 간격 (ms)
} AdcChannelData_t;

// 이동평균 필터 클래스
class RecursiveMovingAverage
{
private:
  float sensorData[WINDOW_SIZE];
  int windowSize;

public:
  RecursiveMovingAverage() : windowSize(WINDOW_SIZE)
  {
    // 초기화
    for (int i = 0; i < windowSize; i++)
    {
      sensorData[i] = 0.0;
    }
  }

  float update(float adValue, float avgOld)
  {
    float avg = 0.0;
    float oldValue = sensorData[0];

    // Shift the array
    for (int i = 0; i < windowSize - 1; i++)
    {
      sensorData[i] = sensorData[i + 1];
    }
    sensorData[windowSize - 1] = adValue;

    // Calculate new average
    avg = avgOld + (sensorData[windowSize - 1] - oldValue) / windowSize;

    return avg;
  }

  // 초기 평균 계산
  float initAverage(float adValue) {
    // 모든 값을 현재 값으로 채우기
    for (int i = 0; i < windowSize; i++) {
      sensorData[i] = adValue;
    }
    return adValue;
  }
};

// 채널별 이동평균 필터 인스턴스
RecursiveMovingAverage movingAvg[NUM_ADC_CHANNELS];

// 채널별 ADC 데이터
AdcChannelData_t adcData[NUM_ADC_CHANNELS] = {
  {0, 0.0, 0.0, 100},  // 채널 0: 100ms 간격
  {1, 0.0, 0.0, 200},  // 채널 1: 200ms 간격
  {2, 0.0, 0.0, 300},  // 채널 2: 300ms 간격
  {3, 0.0, 0.0, 400}   // 채널 3: 400ms 간격
};

// 뮤텍스 핸들
SemaphoreHandle_t adcMutex;

// ADC 변환 태스크
void AdcTask(void *pvParameters);

// 데이터 출력 태스크
void PrintTask(void *pvParameters);

void setup() {
  // 시리얼 초기화
  Serial.begin(115200);
  Serial.println(F("FreeRTOS ADC 이동평균 필터 예제"));

  // ADC 핀 설정
  for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
    pinMode(ADC_PINS[i], INPUT);
  }

  // 뮤텍스 생성
  adcMutex = xSemaphoreCreateMutex();
  if (adcMutex == NULL) {
    Serial.println(F("뮤텍스 생성 실패"));
    while (1);  // 오류 시 중단
  }

  // ADC 변환 태스크 생성 (각 채널별로)
  for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
    char taskName[10];
    sprintf(taskName, "ADC_Ch%d", i);

    xTaskCreate(
      AdcTask,         // 태스크 함수
      taskName,        // 태스크 이름
      128,             // 스택 크기
      (void*)&adcData[i], // 파라미터
      1,               // 우선순위
      NULL             // 태스크 핸들
    );
  }

  // 출력 태스크 생성
  xTaskCreate(
    PrintTask,         // 태스크 함수
    "Print",           // 태스크 이름
    256,               // 스택 크기
    NULL,              // 파라미터
    2,                 // 우선순위 (ADC 태스크보다 높음)
    NULL               // 태스크 핸들
  );
}

void loop() {
  // FreeRTOS 사용시 loop()는 사용되지 않음
}

// ADC 변환 태스크 함수
void AdcTask(void *pvParameters) {
  // 파라미터 가져오기
  AdcChannelData_t *pData = (AdcChannelData_t*)pvParameters;
  uint8_t channel = pData->channelNum;

  // 초기값 읽기 및 필터 초기화
  float initialValue = analogRead(ADC_PINS[channel]) * (5.0 / 1023.0);  // 0-5V 범위로 변환
  float avgValue = movingAvg[channel].initAverage(initialValue);

  // 최초 값 설정
  if (xSemaphoreTake(adcMutex, portMAX_DELAY) == pdTRUE) {
    pData->rawValue = initialValue;
    pData->filteredValue = avgValue;
    xSemaphoreGive(adcMutex);
  }

  TickType_t xLastWakeTime = xTaskGetTickCount();

  for (;;) {
    // ADC 값 읽기
    float rawValue = analogRead(ADC_PINS[channel]) * (5.0 / 1023.0);

    // 이동평균 필터 적용
    float newAvg = movingAvg[channel].update(rawValue, pData->filteredValue);

    // 뮤텍스로 보호된 데이터 업데이트
    if (xSemaphoreTake(adcMutex, portMAX_DELAY) == pdTRUE) {
      pData->rawValue = rawValue;
      pData->filteredValue = newAvg;
      xSemaphoreGive(adcMutex);
    }

    // 지정된 간격으로 대기
    vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(pData->samplingInterval));
  }
}

// 데이터 출력 태스크 함수
void PrintTask(void *pvParameters) {
  TickType_t xLastWakeTime = xTaskGetTickCount();

  for (;;) {
    if (xSemaphoreTake(adcMutex, portMAX_DELAY) == pdTRUE) {
      // 헤더 출력
      Serial.println(F("\n채널\t원시값\t\t필터링값"));
      Serial.println(F("-----------------------------------"));

      // 각 채널 데이터 출력
      for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
        Serial.print(adcData[i].channelNum);
        Serial.print(F("\t"));
        Serial.print(adcData[i].rawValue, 3);
        Serial.print(F("V\t"));
        Serial.print(adcData[i].filteredValue, 3);
        Serial.println(F("V"));
      }

      xSemaphoreGive(adcMutex);
    }

    // 1초마다 출력
    vTaskDelay(pdMS_TO_TICKS(1000));
  }
}

```

---

# 코드 분석

### 주요 구성 요소:

1. **ADC 데이터 구조체 (AdcChannelData_t)**
- `channelNum`: ADC 채널 번호
- `rawValue`: 원시 ADC 값 (0-1023 범위)
- `filteredValue`: 이동평균 필터를 적용한 후의 값
- `samplingInterval`: 각 채널의 샘플링 간격 (ms)
1. **이동평균 필터 클래스 (RecursiveMovingAverage)**
    - `sensorData`: 이동평균을 계산할 데이터를 저장하는 배열
    - `windowSize`: 이동평균을 계산할 윈도우 크기 (6으로 고정)
    - `update()`: 새로 읽은 ADC 값을 기반으로 이동평균을 갱신
    - `initAverage()`: 필터의 초기 평균을 설정하는 함수
2. **FreeRTOS 태스크**
    - **AdcTask**: 각 채널별로 ADC 값을 읽고 이동평균 필터를 적용하는 태스크.
        - 주어진 샘플링 간격에 맞춰 주기적으로 ADC 값을 읽고, 필터링 후 데이터를 `adcData` 배열에 저장.
        - `xSemaphoreTake`와 `xSemaphoreGive`를 사용하여 `adcData` 배열에 접근할 때의 동기화 문제를 해결.
    - **PrintTask**: 1초마다 각 채널의 원시 값과 필터링된 값을 시리얼 모니터에 출력하는 태스크.
        - `adcData`에 저장된 데이터를 출력.
3. **뮤텍스 (SemaphoreHandle_t)**
    - `adcMutex`는 ADC 데이터를 보호하기 위해 사용되는 뮤텍스. `xSemaphoreTake`와 `xSemaphoreGive`를 통해 데이터 접근을 동기화하여 여러 태스크에서 동시에 데이터를 읽고 쓰는 문제를 방지.
4. **`setup()` 함수**
    - 시리얼 통신 초기화, ADC 핀 설정, 뮤텍스 생성, 각 채널에 대한 ADC 태스크와 출력 태스크 생성 등을 수행.
5. **`loop()` 함수**
    - FreeRTOS를 사용하므로 `loop()` 함수는 실제로 사용되지 않음.
    - 모든 동작은 태스크에서 처리됨.

### 동작 흐름

1. `setup()` 함수에서 FreeRTOS 태스크가 생성됨. 각 ADC 채널에 대해 `AdcTask`가 생성되고, 데이터 출력을 담당하는 `PrintTask`가 생성됨.
2. `AdcTask`는 각 채널에서 ADC 값을 읽고, 그 값에 이동평균 필터를 적용한 후 데이터를 `adcData` 배열에 업데이트함. 주어진 샘플링 간격에 맞춰 주기적으로 데이터를 읽고 필터링함.
3. `PrintTask`는 1초마다 `adcData`에서 각 채널의 원시 값과 필터링된 값을 읽어 시리얼 모니터에 출력함.
4. 뮤텍스는 여러 태스크가 `adcData`에 접근할 때 발생할 수 있는 동시성 문제를 방지함.
